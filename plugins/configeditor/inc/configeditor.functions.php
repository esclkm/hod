<?php

/**
 * plugin Config Editor for Cotonti Siena
 * 
 * @package configeditor
 * @version 1.0.0
 * @author esclkm
 * @copyright 
 * @license BSD
 *  */
// Generated by Cotonti developer tool (littledev.ru)
defined('COT_CODE') or die('Wrong URL.');

/* @var $db CotDB */
/* @var $cache Cache */
/* @var $t Xtemplate */
$db->registerTable('configeditor');

require_once cot_langfile('configeditor', 'plug');
if(!class_exists('cfg_editor'))
{
	class cfg_editor
	{

		public $cats;

		public static function cat_add($name, $title, $desc)
		{
			global $cache, $db, $db_configeditor;
			if (empty($name) || in_array($name, self::cat_exists_list()))
			{
				return false;
			}
			if (empty($title))
			{
				$title = $name;
			}
			$db->insert($db_configeditor, array('configcat_name' => $name, 'configcat_title' => $title, 'configcat_desc' => $desc));
			return $db->lastInsertId();
		}

		public static function cat_edit($name, $title, $desc)
		{
			global $cache, $db, $db_configeditor;
			if (empty($title))
			{
				$title = $name;
			}
			$db->update($db_configeditor, array('configcat_title' => $title, 'configcat_desc' => $desc), 'configcat_name="'.$db->prep($name).'"');
			return true;
		}

		public static function cat_delete($name)
		{
			global $cache, $db, $db_configeditor;
			$db->delete($db_configeditor, 'configcat_name="'.$db->prep($name).'"');
			return true;
		}

		public static function cat_list()
		{
			global $cache, $db, $db_configeditor;
			$rows = $db->query("SELECT * FROM $db_configeditor ORDER BY configcat_title")->fetchAll();
			return $rows;
		}
		public static function cat_system_list()
		{
			global $cache, $db, $db_config;
			$cats = $db->query("SELECT DISTINCT config_cat FROM $db_config  WHERE config_owner = 'core' AND (config_donor IS NULL OR config_donor='') ORDER BY config_cat")->fetchAll(PDO::FETCH_COLUMN, 0);
			return $cats;
		}
		public static function cat_exists_list()
		{
			global $cache, $db, $db_config, $db_configeditor;
			$cats = $db->query("SELECT DISTINCT config_cat FROM $db_config  WHERE config_owner = 'core' AND (config_donor IS NULL OR config_donor='') ORDER BY config_cat")->fetchAll(PDO::FETCH_COLUMN, 0);
			
			global $cache, $db, $db_configeditor;
			$rows = $db->query("SELECT configcat_name FROM $db_configeditor ORDER BY configcat_title")->fetchAll(PDO::FETCH_COLUMN, 0);
			$rows;
			
			return array_merge($cats, $rows);
			
		}

		public static function cat_info($name)
		{
			global $cache, $db, $db_configeditor, $db_config, $L;
			$row = $db->query("SELECT * FROM $db_configeditor WHERE configcat_name='".$db->prep($name)."' LIMIT 1")->fetch();
			if(empty($row))
			{
				$cat = $db->query("SELECT config_cat FROM $db_config  WHERE config_owner = 'core' 
					AND (config_donor IS NULL OR config_donor='') AND config_cat='".$db->prep($name)."' LIMIT 1")->fetchColumn();
				if(!empty($cat))
				{
					$row = array(
						'configcat_id' => 0,
						'configcat_name' => $name,
						'configcat_title' => $L['core_'.$name],
						'configcat_desc' => $L['core_'.$name.'_desc'],
					);
				}
			}
			
			return $row;
		}
		
		public static function config_add($cat, $name, $order, $title, $desc, $type, $default, $variants)
		{
			global $cache, $db, $db_config, $sys;
			if (empty($name) || empty($cat) || self::config_exists($name))
			{
				return false;
			}
			if (empty($title))
			{
				$title = $name;
			}
			if (!empty($variants))
			{
				$vars = array_map('trim', explode(',', $variants));
				if (!in_array($default, $vars))
				{
					$default = $vars[0];
				}
			}
			$db->insert($db_config, array(
				'config_owner' => 'core',
				'config_cat' => $cat,
				'config_subcat' => '',
				'config_order' => $order,
				'config_name' => $name,
				'config_type' => $type,
				'config_value' => $default,
				'config_default' => $default,
				'config_variants' => $variants,
				'config_donor' => 'configeditor',			
				'config_text' => $title,			
				'config_desc' => $desc,	
			));
			return $db->lastInsertId();
		}

		public static function config_edit($cat, $name, $order, $title, $desc, $type, $default, $variants)
		{
			global $cache, $db, $db_config, $sys;
			if (empty($title))
			{
				$title = $name;
			}
			if (!empty($variants))
			{
				$vars = array_map('trim', explode(',', $variants));
				if (!in_array($default, $vars))
				{
					$default = $vars[0];
				}
			}
			$db->update($db_config, array(
				'config_order' => $order,
				'config_text' => $title,
				'config_desc' => $desc,
				'config_type' => $type,
				'config_default' => $default,
				'config_variants' => $variants,
				), 'config_name="'.$db->prep($name).'" AND config_donor="configeditor" AND config_owner="core" AND config_cat="'.$db->prep($cat).'"');
			return true;
		}

		public static function config_delete($cat, $name)
		{
			global $cache, $db, $db_config;
			$db->delete($db_config, 'config_name="'.$db->prep($name).'" AND config_donor="configeditor" AND config_owner="core" AND config_cat="'.$db->prep($cat).'"');
			return true;
		}
		
		public static function config_exists($name)
		{
			global $cache, $db, $db_config;		
			$count = $db->query("SELECT COUNT(*) FROM $db_config  
				WHERE config_name='".$db->prep($name)."' AND config_owner = 'core' LIMIT 1")->fetchColumn();
			
			return (int)$count > 0 ? true : false;
		}

		public static function config_list($cat)
		{
			global $cache, $db, $db_config;
			$rows = $db->query("SELECT * FROM $db_config WHERE config_owner='core' 
				AND config_cat='".$db->prep($cat)."' 
				ORDER BY config_order ASC")->fetchAll();
			return $rows;
		}

	}
}