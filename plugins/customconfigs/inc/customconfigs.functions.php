<?php

/**
 * plugin Custom Configs for Cotonti Siena
 * 
 * @package customconfigs
 * @version 1.0.0
 * @author esclkm
 * @copyright 
 * @license BSD
 *  */
// Generated by Cotonti developer tool (littledev.ru)
defined('COT_CODE') or die('Wrong URL.');

/**
 * Generic text configuration. Is displayed as textarea. Contains text.
 * Is used by default.
 */
define('COT_CUSTOM_CONFIG_TYPE_TEXT', 0);
/**
 * A string, max length is 255 chars. Is displayed as a single line of input.
 * The list of variants is ignored for this type.
 */
define('COT_CUSTOM_CONFIG_TYPE_STRING', 1);
/**
 * Selection from the list of possible variants. Is displayed as a dropdown.
 */
define('COT_CUSTOM_CONFIG_TYPE_SELECT', 2);
/**
 * Radio yes/no selection.
 */
define('COT_CUSTOM_CONFIG_TYPE_RADIO', 3);
/**
 * Callback function type
 */
//define('COT_CUSTOM_CONFIG_TYPE_CALLBACK', 4);
/**
 * Hidden config. It is actually a text string, but it is not displayed anywhere
 */
//define('COT_CUSTOM_CONFIG_TYPE_HIDDEN', 5);
/**
 * Visual separator/fieldset
 */
define('COT_CUSTOM_CONFIG_TYPE_SEPARATOR', 6);
/**
 * Integer range
 */
define('COT_CUSTOM_CONFIG_TYPE_RANGE', 7);
/**
 * Custom type.
 */
//define('COT_CUSTOM_CONFIG_TYPE_CUSTOM', 8);

/* @var $db CotDB */
/* @var $cache Cache */
/* @var $t Xtemplate */
$db->registerTable('customconfigs');
$db->registerTable('customconfigs_cats');

require_once cot_langfile('customconfigs', 'plug');

class ccfg
{

	public $cats;

	public static function load()
	{
		global $cache, $db, $db_customconfigs, $custom_cfg, $db_customconfigs_cats;
		if ($cache && $custom_cfg)
		{
			return true;
		}
		$sql_config = $db->query("SELECT * FROM $db_customconfigs");
		$custom_cfg = array();
		while ($row = $sql_config->fetch())
		{
			$custom_cfg[$row['config_cat']][$row['config_name']] = $row['config_value'];
		}
		$sql_config->closeCursor();

		$cache && $cache->db->store('custom_cfg', $custom_cfg, 'system');
		return true;
	}

	public static function cat_add($name, $title, $desc)
	{
		global $cache, $db, $db_customconfigs, $custom_cfg, $db_customconfigs_cats;
		if (empty($name))
		{
			return false;
		}
		if (empty($title))
		{
			$title = $name;
		}
		$db->insert($db_customconfigs_cats, array('configcat_name' => $name, 'configcat_title' => $title, 'configcat_desc' => $desc));
		return $db->lastInsertId();
	}

	public static function cat_edit($name, $title, $desc)
	{
		global $cache, $db, $db_customconfigs, $custom_cfg, $db_customconfigs_cats;
		if (empty($title))
		{
			$title = $name;
		}
		$db->update($db_customconfigs_cats, array('configcat_title' => $title, 'configcat_desc' => $desc), 'configcat_name="'.$db->prep($name).'"');
		return true;
	}

	public static function cat_delete($name)
	{
		global $cache, $db, $db_customconfigs, $custom_cfg, $db_customconfigs_cats;
		$db->delete($db_customconfigs_cats, 'configcat_name="'.$db->prep($name).'"');
		return true;
	}

	public static function cat_list()
	{
		global $cache, $db, $db_customconfigs, $custom_cfg, $db_customconfigs_cats;
		$rows = $db->query("SELECT * FROM $db_customconfigs_cats ORDER BY configcat_title")->fetchAll();
		return $rows;
	}

	public static function cat_info($name)
	{
		global $cache, $db, $db_customconfigs, $custom_cfg, $db_customconfigs_cats;
		$row = $db->query("SELECT * FROM $db_customconfigs_cats WHERE configcat_name='".$db->prep($name)."' LIMIT 1")->fetch();
		return $row;
	}

	/*
	  -`config_id` int(11) NOT NULL auto_increment,,
	  -`config_cat` varchar(255) collate utf8_unicode_ci NOT NULL default '',
	  -`config_order` int(11) collate utf8_unicode_ci NOT NULL default '00',
	  -`config_name` varchar(255) collate utf8_unicode_ci NOT NULL default '',
	  `config_type` tinyint NOT NULL default '0',
	  -`config_value` text collate utf8_unicode_ci NOT NULL,
	  `config_default` varchar(255) collate utf8_unicode_ci NOT NULL default '',
	  `config_variants` varchar(255) collate utf8_unicode_ci NOT NULL default '',
	  -`config_title` varchar(255) collate utf8_unicode_ci NOT NULL default '',
	  -`config_desc` text collate utf8_unicode_ci NOT NULL,
	  -`config_updated` int(11) NOT NULL,
	 */

	public static function config_add($cat, $name, $order, $title, $desc, $type, $default, $variants)
	{
		global $cache, $db, $db_customconfigs, $custom_cfg, $db_customconfigs_cats, $sys;
		if (empty($name) || empty($cat))
		{
			return false;
		}
		if (empty($title))
		{
			$title = $name;
		}
		if (!empty($variants))
		{
			$vars = array_map('trim', explode(',', $variants));
			if (!in_array($default, $vars))
			{
				$default = $vars[0];
			}
		}
		$db->insert($db_customconfigs, array(
			'config_name' => $name,
			'config_cat' => $cat,
			'config_order' => $order,
			'config_title' => $title,
			'config_desc' => $desc,
			'config_type' => $type,
			'config_default' => $default,
			'config_value' => $default,
			'config_variants' => $variants,
			'config_updated' => $sys['now'],
		));
		return $db->lastInsertId();
	}

	public static function config_edit($cat, $name, $order, $title, $desc, $type, $default, $variants)
	{
		global $cache, $db, $db_customconfigs, $custom_cfg, $db_customconfigs_cats, $sys;
		if (empty($title))
		{
			$title = $name;
		}
		if (!empty($variants))
		{
			$vars = array_map('trim', explode(',', $variants));
			if (!in_array($default, $vars))
			{
				$default = $vars[0];
			}
		}
		$db->update($db_customconfigs, array(
			'config_order' => $order,
			'config_title' => $title,
			'config_desc' => $desc,
			'config_type' => $type,
			'config_default' => $default,
			'config_variants' => $variants,
			'config_updated' => $sys['now'],
			), 'config_name="'.$db->prep($name).'" AND config_cat="'.$db->prep($cat).'"');
		return true;
	}

	public static function config_delete($cat, $name)
	{
		global $cache, $db, $db_customconfigs, $custom_cfg, $db_customconfigs_cats;
		$db->delete($db_customconfigs, 'config_name="'.$db->prep($name).'" AND config_cat="'.$db->prep($cat).'"');
		return true;
	}

	public static function config_change($cat, $name, $value)
	{
		global $cache, $db, $db_customconfigs, $custom_cfg, $db_customconfigs_cats, $sys;

		$row = $db->query('SELECT * FROM '.$db_customconfigs.' WHERE config_name="'.$db->prep($name).'" AND config_cat="'.$db->prep($cat).'" ORDER BY config_order ASC')->fetch();
		if (!empty($row['config_variants']))
		{
			$vars = array_map('trim', explode(',', $row['config_variants']));
			if (!in_array($value, $vars))
			{
				$value = $vars[0];
			}
		}
		$db->update($db_customconfigs, array(
			'config_value' => $value,
			'config_updated' => $sys['now'],
			), 'config_name="'.$db->prep($name).'" AND config_cat="'.$db->prep($cat).'"');
		return true;
	}

	public static function config_setdefault($cat, $name)
	{
		global $cache, $db, $db_customconfigs, $custom_cfg, $db_customconfigs_cats, $sys;

		$db->query('UPDATE '.$db_customconfigs.' SET config_value=config_default WHERE config_name="'.$db->prep($name).'" AND config_cat="'.$db->prep($cat).'"');
		return true;
	}

	public static function config_list($cat)
	{
		global $cache, $db, $db_customconfigs, $custom_cfg, $db_customconfigs_cats;
		$rows = $db->query("SELECT * FROM $db_customconfigs WHERE config_cat='".$db->prep($cat)."' ORDER BY config_order ASC")->fetchAll();
		return $rows;
	}

	public static function config_input($name, $type = 0, $value = '', $options = '')
	{
		$config_input = '';
		switch ($type)
		{
			case COT_CUSTOM_CONFIG_TYPE_STRING:
				$config_input = cot_inputbox('text', $name, $value);
				break;

			case COT_CUSTOM_CONFIG_TYPE_SELECT:
				if (!empty($options))
				{
					$params = array_map('trim', explode(',', $options));
					$params_titles = cot_config_selecttitles($name, $params);
				}
				$config_input = (is_array($params)) ? cot_selectbox($value, $name, $params, $params_titles, false) : cot_inputbox('text', $name, $value);

				break;

			case COT_CUSTOM_CONFIG_TYPE_RADIO:
				global $L;
				$config_input = cot_radiobox($value, $name, array(1, 0), array($L['Yes'], $L['No']), '', ' ');
				break;

			case COT_CUSTOM_CONFIG_TYPE_RANGE:
				$range = preg_split('#\s*,\s*#', $options);
				$params = range($range[0], $range[1], empty($range[2]) ? 1 : $range[2]);
				$config_input = cot_selectbox($value, $name, $params, $params, false);
				break;

			case COT_CONFIG_TYPE_SEPARATOR:
				break;

			default :
				$config_input = cot_textarea($name, $value, 8, 70);
				break;
		}
		return $config_input;
	}

}
